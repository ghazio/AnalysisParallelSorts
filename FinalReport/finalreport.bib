@article{Xiao,
author = {Xiao, Shi-yang and Li, Cai-lin and Guo, Bao-yun and Xiao, Han},
title = {A radix sorting parallel algorithm suitable for graphic processing unit computing},
journal = {Concurrency and Computation: Practice and Experience},
volume = {33},
number = {6},
pages = {e5818},
keywords = {dataset, graphic processing unit (GPU), heterogeneous platform, open computing language (OpenCL), parallel algorithm, radix sorting},
doi = {https://doi.org/10.1002/cpe.5818},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.5818},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/cpe.5818},
note = {e5818 CPE-19-1124.R2},
abstract = {Summary Radix sorting is an essential basic data processing operation in many computer fields. It has important practical significance to accelerate its performance through Graphic Processing Unit (GPU). The heterogeneous parallel computing technology attracts much attention and is widely applied for its effective computation efficiency and parallel real-time data processing capability. Taking advantage of the parallelism of GPU in numerical computation processing, a parallelization design method of the Binary\_Least Significant Digit (LSD) first Radix Sorting (B\_LSD\_RS) algorithm based on Open Computing Language (OpenCL) is proposed. The radix sorting algorithm is divided into multiple kernel tasks, and the kernels are sequentially controlled by the event information transfer. The parallel algorithm is implemented and verified on the GPU + CPU heterogeneous platform. The experimental results show that compared with the performance of the B\_LSD\_RS sequential algorithm based on AMD Ryzen5 1600X CPU, B\_LSD\_RS parallel algorithm based on Open Multi-Processing (OpenMP) and B\_LSD\_RS parallel algorithm based on Compute Unified Device Architecture (CUDA), the B\_LSD\_RS parallel algorithm based on OpenCL obtained 28.86 times, 11.01 times and 2.14 times speedup in the NVIDIA GTX 1070 computing platform respectively, not only achieves high performance but also achieves performance portability among different GPU computing platforms.},
year = {2021}
}

@inproceedings{Pasetto,
author = {Pasetto, Davide and Akhriev, Albert},
title = {A Comparative Study of Parallel Sort Algorithms},
year = {2011},
isbn = {9781450309424},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2048147.2048207},
doi = {10.1145/2048147.2048207},
abstract = {In this paper we examine the performance of parallel sorting algorithms on modern multi-core hardware. Several general-purpose methods, with particular interest in sorting of database records and huge arrays, are evaluated and a brief analysis is provided.},
booktitle = {Proceedings of the ACM International Conference Companion on Object Oriented Programming Systems Languages and Applications Companion},
pages = {203–204},
numpages = {2},
keywords = {sorting throughput, parallel sorting, scalability},
location = {Portland, Oregon, USA},
series = {OOPSLA '11}
}




@misc{Jordy,
  title = {Fastest sorting algorithm for distributed systems (Parallel Radix Sort)},
  howpublished = {\url{https://summerofhpc.prace-ri.eu/fastest-sorting-algorithm-for-distributed-systems-parallel-radix-sort-difficulty-medium/}},
 author={Jordy Innocentius Ajanohoun}
}
@misc{Sequential-Radix,
  title = {Radix Sort},
  howpublished = {\urlhttps:{//www.geeksforgeeks.org/radix-sort/}}
}
@misc{Parallel-Radix,
  title = {Radix Sort},
  howpublished = {\urlhttps:{https://github.com/mpseligson/radix/blob/master/radix.c}},
  author={Matthew Seligson}
}
@misc{Sequential-oddeven,
  title = {Odd-even Sort},
  howpublished ={\urlhttps:{https://www.geeksforgeeks.org/odd-even-sort-brick-sort/}}
}
@misc{Sequential-Bitonic,
  title = {Bitonic Sort},
  howpublished ={\urlhttps:{//www.geeksforgeeks.org/radix-sort/}}
}



